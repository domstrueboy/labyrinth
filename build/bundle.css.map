{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Editor.svelte",
    "../../MainButton.svelte",
    "../../Labyrinth.svelte",
    "../../Cell.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Editor from './components/Editor.svelte';\n\timport Labyrinth from './components/Labyrinth.svelte';\n\timport MainButton from './components/MainButton.svelte';\n</script>\n\n<main>\n\t<Editor />\n\t<Labyrinth />\n\t<MainButton />\n</main>\n\n<style>\n\tmain {\n\t\theight: 100vh;\n\t\twidth: 100vw;\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t}\n</style>",
    "<script>\n  import { isAppStarted, commands } from '../stores.js';\n  import parser from '../functions/parser.js';\n  import lexer from '../functions/lexer.js';\n  import runner from '../functions/runner.js';\n\n  let editor;\n  let content;\n  \n  $: if ($isAppStarted) {\n    const parsed = parser(editor.innerHTML);\n    const lexed = lexer(parsed);\n    console.log(lexed);\n    const separateCommands = runner(lexed);\n    console.log(separateCommands);\n    commands.set(separateCommands);\n  }\n\n  // $: console.log('input handling (lint, suggestions, etc)', content);\n</script>\n\n<div\n  bind:this={editor}\n  bind:innerHTML={content}\n  contenteditable=\"true\"\n  class=\"wrapper\"\n  autofocus\n>\n</div>\n\n<style>\n  .wrapper {\n    flex: 1;\n    background: lightgray;\n    padding: 8px;\n    font-size: 24px;\n    font-family: 'Courier New', Courier, monospace;\n    font-weight: bold;\n    color: grey;\n    outline: none;\n  }\n</style>",
    "<script>\n  import { isAppStarted } from '../stores.js';\n\n  function handleClick() {\n    isAppStarted.set(true);\n  }\n</script>\n\n<button on:click={handleClick}>СТАРТ</button>\n\n<style>\n  button {\n    position: absolute;\n    bottom: 13px;\n    left: 10px;\n    cursor: pointer;\n    margin: 0;\n    font-size: 32px;\n    font-weight: 200;\n    box-shadow: 4px 4px 4px gray;\n    border: 0;\n    background: white;\n  }\n  button:active {\n    box-shadow: 2px 2px 2px gray;\n    background: white;\n  }\n</style>",
    "<script>\n  import Cell from './Cell.svelte';\n  import { commands } from '../stores.js';\n\n  import checkIfInField from '../functions/checkIfInField.js';\n  import checkIfWin from '../functions/checkIfWin.js';\n\n  let grid = [\n    [0, 0, 0, 1, 3],\n    [0, 0, 1, 1, 0],\n    [1, 1, 1, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 1, 1, 2],\n  ];\n  let rows = grid.length;\n  let cols = grid[0].length;\n\n  let indexY = grid.findIndex(row => row.includes(2));\n  let indexX = grid[indexY].findIndex(col => col === 2);\n\n  let posX, posY;\n\n  $: posX = indexX + 1;\n  $: posY = indexY + 1;\n\n  function methodThatReturnsAPromise(command) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let newX, newY;\n        switch (command) {\n          case 'left':\n            newX = indexX - 1;\n            if (checkIfInField(grid, newX, indexY)) {\n              indexX -= 1;\n              if (checkIfWin(grid, indexX, indexY)) {\n                alert('Победа!');\n              }\n            } else {\n              alert('Вы вышли за пределы поля!');\n            }\n            break;\n          case 'right':\n            newX = indexX + 1;\n            if (checkIfInField(grid, newX, indexY)) {\n              indexX += 1;\n              if (checkIfWin(grid, indexX, indexY)) {\n                alert('Победа!');\n              }\n            } else {\n              alert('Вы вышли за пределы поля!');\n            }\n            break;\n          case 'up':\n            newY = indexY - 1;\n            if (checkIfInField(grid, indexX, newY)) {\n              indexY -= 1;\n              if (checkIfWin(grid, indexX, indexY)) {\n                alert('Победа!');\n              }\n            } else {\n              alert('Вы вышли за пределы поля!');\n            }\n            break;\n          case 'down':\n            newY = indexY + 1;\n            if (checkIfInField(grid, indexX, newY)) {\n              indexY += 1;\n              if (checkIfWin(grid, indexX, indexY)) {\n                alert('Победа!');\n              }\n            } else {\n              alert('Вы вышли за пределы поля!');\n            }\n            break;\n        }\n        resolve();\n      }, 500);\n    });\n  }\n\n  $: if ($commands.length > 0) {\n    $commands.reduce((accumulatorPromise, command) => {\n      return accumulatorPromise.then(() => {\n        return methodThatReturnsAPromise(command);\n      });\n    }, Promise.resolve());\n  }\n</script>\n\n<div\n  class=\"wrapper\"\n  style=\"--rows:{rows};--columns:{cols}\"\n>\n  {#each grid as row, y}\n    {#each row as cellCode, x}\n      <Cell {cellCode} />\n    {/each}\n  {/each}\n  <div\n    class=\"chip\"\n    style=\"--pos-x:{posX};--pos-y:{posY}\"\n  >\n  </div>\n</div>\n\n<style>\n  .wrapper {\n    flex: 1;\n    display: grid;\n    grid-template-rows: repeat(var(--rows), 1fr);\n    grid-template-columns: repeat(var(--columns), 1fr);\n    grid-column-gap: 2px;\n    grid-row-gap: 2px;\n    padding: 8px;\n    margin: auto;\n    position: relative;\n  }\n  .chip {\n    position: absolute;\n    grid-column-start: var(--pos-x);\n    grid-column-end: var(--pos-x);\n    grid-row-start: var(--pos-y);\n    grid-row-end: var(--pos-y);\n    width: 80%;\n    height: 80%;\n    background: black;\n    border-radius: 50%;\n    margin-left: 10%;\n    margin-top: 10%;\n  }\n</style>",
    "<script>\n  import { onMount } from 'svelte';\n\n  export let cellCode;\n\n  let cell;\n  let width;\n\n  let cellTypeByCode = ['none', 'path', 'start', 'finish'];\n\n  onMount(() => {\n    width = cell.offsetWidth + 'px';\n  });\n</script>\n\n<div\n  class=\"{cellTypeByCode[cellCode]}\"\n  bind:this={cell}\n  style=\"--height:{width}\"\n>\n</div>\n\n<style>\n  div {\n    height: var(--height);\n  }\n  .path {\n    background: lightpink;\n  }\n  .start {\n    background: lightgreen;\n  }\n  .start::after {\n    content: 'Start'\n  }\n  .finish {\n    background: salmon;\n  }\n  .finish::after {\n    content: 'Finish'\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAaC,IAAI,eAAC,CAAC,AACL,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,QAAQ,AACnB,CAAC;ACaA,QAAQ,eAAC,CAAC,AACR,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,SAAS,CACrB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAC9C,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,AACf,CAAC;AC7BD,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAC5B,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,qBAAM,OAAO,AAAC,CAAC,AACb,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAC5B,UAAU,CAAE,KAAK,AACnB,CAAC;ACkFD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAC5C,qBAAqB,CAAE,OAAO,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAClD,eAAe,CAAE,GAAG,CACpB,YAAY,CAAE,GAAG,CACjB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,iBAAiB,CAAE,IAAI,OAAO,CAAC,CAC/B,eAAe,CAAE,IAAI,OAAO,CAAC,CAC7B,cAAc,CAAE,IAAI,OAAO,CAAC,CAC5B,YAAY,CAAE,IAAI,OAAO,CAAC,CAC1B,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,GAAG,AACjB,CAAC;AC5GD,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,IAAI,QAAQ,CAAC,AACvB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,UAAU,CAAE,SAAS,AACvB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,UAAU,AACxB,CAAC,AACD,qBAAM,OAAO,AAAC,CAAC,AACb,OAAO,CAAE,OAAO;EAClB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,sBAAO,OAAO,AAAC,CAAC,AACd,OAAO,CAAE,QAAQ;EACnB,CAAC"
}